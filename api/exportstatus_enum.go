// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package api

import (
	"errors"
	"fmt"
)

const (
	// ExportStatusUnknown is a exportStatus of type Unknown.
	ExportStatusUnknown exportStatus = ""
	// ExportStatusInProgress is a exportStatus of type InProgress.
	ExportStatusInProgress exportStatus = "In Progress"
	// ExportStatusFailed is a exportStatus of type Failed.
	ExportStatusFailed exportStatus = "Failed"
	// ExportStatusCompleted is a exportStatus of type Completed.
	ExportStatusCompleted exportStatus = "Completed"
)

var ErrInvalidexportStatus = errors.New("not a valid exportStatus")

// String implements the Stringer interface.
func (x exportStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x exportStatus) IsValid() bool {
	_, err := ParseexportStatus(string(x))
	return err == nil
}

var _exportStatusValue = map[string]exportStatus{
	"":            ExportStatusUnknown,
	"In Progress": ExportStatusInProgress,
	"Failed":      ExportStatusFailed,
	"Completed":   ExportStatusCompleted,
}

// ParseexportStatus attempts to convert a string to a exportStatus.
func ParseexportStatus(name string) (exportStatus, error) {
	if x, ok := _exportStatusValue[name]; ok {
		return x, nil
	}
	return exportStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidexportStatus)
}

// MarshalText implements the text marshaller method.
func (x exportStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *exportStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseexportStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
