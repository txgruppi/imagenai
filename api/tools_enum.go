// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package api

import (
	"errors"
	"fmt"
)

const (
	// ToolCrop is a tool of type Crop.
	ToolCrop tool = "crop"
	// ToolHDRMerge is a tool of type HDRMerge.
	ToolHDRMerge tool = "hdr_merge"
	// ToolPerspectiveCorrection is a tool of type PerspectiveCorrection.
	ToolPerspectiveCorrection tool = "perspective_correction"
	// ToolPortraitCrop is a tool of type PortraitCrop.
	ToolPortraitCrop tool = "portrait_crop"
	// ToolStraighten is a tool of type Straighten.
	ToolStraighten tool = "straighten"
	// ToolSubjectMask is a tool of type SubjectMask.
	ToolSubjectMask tool = "subject_mask"
	// ToolSmoothSkin is a tool of type SmoothSkin.
	ToolSmoothSkin tool = "smooth_skin"
)

var ErrInvalidtool = errors.New("not a valid tool")

// String implements the Stringer interface.
func (x tool) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x tool) IsValid() bool {
	_, err := Parsetool(string(x))
	return err == nil
}

var _toolValue = map[string]tool{
	"crop":                   ToolCrop,
	"hdr_merge":              ToolHDRMerge,
	"perspective_correction": ToolPerspectiveCorrection,
	"portrait_crop":          ToolPortraitCrop,
	"straighten":             ToolStraighten,
	"subject_mask":           ToolSubjectMask,
	"smooth_skin":            ToolSmoothSkin,
}

// Parsetool attempts to convert a string to a tool.
func Parsetool(name string) (tool, error) {
	if x, ok := _toolValue[name]; ok {
		return x, nil
	}
	return tool(""), fmt.Errorf("%s is %w", name, ErrInvalidtool)
}

// MarshalText implements the text marshaller method.
func (x tool) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *tool) UnmarshalText(text []byte) error {
	tmp, err := Parsetool(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
