// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package api

import (
	"errors"
	"fmt"
)

const (
	// PhotographyTypeNone is a photographyType of type None.
	PhotographyTypeNone photographyType = ""
	// PhotographyTypeWedding is a photographyType of type Wedding.
	PhotographyTypeWedding photographyType = "WEDDING"
	// PhotographyTypeRealEstate is a photographyType of type RealEstate.
	PhotographyTypeRealEstate photographyType = "REAL_ESTATE"
	// PhotographyTypeSchool is a photographyType of type School.
	PhotographyTypeSchool photographyType = "SCHOOL"
	// PhotographyTypeSports is a photographyType of type Sports.
	PhotographyTypeSports photographyType = "SPORTS"
	// PhotographyTypeEvents is a photographyType of type Events.
	PhotographyTypeEvents photographyType = "EVENTS"
	// PhotographyTypePortraits is a photographyType of type Portraits.
	PhotographyTypePortraits photographyType = "PORTRAITS"
	// PhotographyTypeNoType is a photographyType of type NoType.
	PhotographyTypeNoType photographyType = "NO_TYPE"
	// PhotographyTypeOther is a photographyType of type Other.
	PhotographyTypeOther photographyType = "OTHER"
	// PhotographyTypeLandscapeNature is a photographyType of type LandscapeNature.
	PhotographyTypeLandscapeNature photographyType = "LANDSCAPE_NATURE"
	// PhotographyTypeFamilyNewborn is a photographyType of type FamilyNewborn.
	PhotographyTypeFamilyNewborn photographyType = "FAMILY_NEWBORN"
	// PhotographyTypeBoudoir is a photographyType of type Boudoir.
	PhotographyTypeBoudoir photographyType = "BOUDOIR"
)

var ErrInvalidphotographyType = errors.New("not a valid photographyType")

// String implements the Stringer interface.
func (x photographyType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x photographyType) IsValid() bool {
	_, err := ParsephotographyType(string(x))
	return err == nil
}

var _photographyTypeValue = map[string]photographyType{
	"":                 PhotographyTypeNone,
	"WEDDING":          PhotographyTypeWedding,
	"REAL_ESTATE":      PhotographyTypeRealEstate,
	"SCHOOL":           PhotographyTypeSchool,
	"SPORTS":           PhotographyTypeSports,
	"EVENTS":           PhotographyTypeEvents,
	"PORTRAITS":        PhotographyTypePortraits,
	"NO_TYPE":          PhotographyTypeNoType,
	"OTHER":            PhotographyTypeOther,
	"LANDSCAPE_NATURE": PhotographyTypeLandscapeNature,
	"FAMILY_NEWBORN":   PhotographyTypeFamilyNewborn,
	"BOUDOIR":          PhotographyTypeBoudoir,
}

// ParsephotographyType attempts to convert a string to a photographyType.
func ParsephotographyType(name string) (photographyType, error) {
	if x, ok := _photographyTypeValue[name]; ok {
		return x, nil
	}
	return photographyType(""), fmt.Errorf("%s is %w", name, ErrInvalidphotographyType)
}

// MarshalText implements the text marshaller method.
func (x photographyType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *photographyType) UnmarshalText(text []byte) error {
	tmp, err := ParsephotographyType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
